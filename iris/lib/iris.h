#ifndef IRIS_H
#define IRIS_H

#include <stdlib.h>

typedef struct
{
	size_t line;
	size_t col;
	size_t pos;

	size_t data_len;
	const char *data;
} lexer_t;

typedef enum
{
	// Operators
	TOKEN_TYPE_COMMA,
	TOKEN_TYPE_PLUS, TOKEN_TYPE_MINUS,
	TOKEN_TYPE_STAR, TOKEN_TYPE_SLASH,
	TOKEN_TYPE_GREATER, TOKEN_TYPE_SMALLER,
	TOKEN_TYPE_BANG, TOKEN_TYPE_EQUALS,
	TOKEN_TYPE_AMPERSAND, TOKEN_TYPE_PIPE,
	TOKEN_TYPE_XOR, TOKEN_TYPE_TILDE,

	// Keywords
	TOKEN_TYPE_AUTO, TOKEN_TYPE_BREAK,
	TOKEN_TYPE_CASE, TOKEN_TYPE_CHAR,
	TOKEN_TYPE_CONST, TOKEN_TYPE_CONTINUE,
	TOKEN_TYPE_DEFAULT, TOKEN_TYPE_DO,
	TOKEN_TYPE_DOUBLE, TOKEN_TYPE_ELSE,
	TOKEN_TYPE_ENUM, TOKEN_TYPE_EXTERN,
	TOKEN_TYPE_FLOAT, TOKEN_TYPE_FOR,
	TOKEN_TYPE_GOTO, TOKEN_TYPE_IF,
	TOKEN_TYPE_INT, TOKEN_TYPE_LONG,
	TOKEN_TYPE_REGISTER, TOKEN_TYPE_RETURN,
	TOKEN_TYPE_SHORT, TOKEN_TYPE_SIGNED,
	TOKEN_TYPE_SIZEOF, TOKEN_TYPE_STATIC,
	TOKEN_TYPE_STRUCT, TOKEN_TYPE_SWITCH,
	TOKEN_TYPE_TYPEDEF, TOKEN_TYPE_UNION,
	TOKEN_TYPE_UNSIGNED, TOKEN_TYPE_VOID,
	TOKEN_TYPE_VOLATILE, TOKEN_TYPE_WHILE,
	
	// Misc
	TOKEN_TYPE_LEFT_PAREN, TOKEN_TYPE_RIGHT_PAREN,
	TOKEN_TYPE_LEFT_BRACE, TOKEN_TYPE_RIGHT_BRACE,
	TOKEN_TYPE_LEFT_BRACKET, TOKEN_TYPE_RIGHT_BRACKET,
	TOKEN_TYPE_SEMICOLON, TOKEN_TYPE_COLON,

	TOKEN_TYPE_IDENTIFIER, TOKEN_TYPE_EOF,

	TOKEN_TYPE_STRING_LITERAL, TOKEN_TYPE_CHAR_LITERAL,
	TOKEN_TYPE_NUMERIC_LITERAL, TOKEN_TYPE_FLOAT_LITERAL,
} token_type_t;

typedef struct
{
	size_t start;
	size_t end;

	size_t line;
	size_t col;

	token_type_t t;
} token_t;

#define E_INVALIDPARAM 1

int lexer_init(lexer_t *, const char *, size_t);

#define E_INVALIDTOKEN 2
#define E_INVALIDSTATE 3
#define E_UNTERMINATEDSTRINGLITERAL 4
#define E_UNTERMINATEDCHARLITERAL 5
#define E_CHARLITERALTOOBIG 6

int lexer_next_token(lexer_t *, token_t *);

#endif

